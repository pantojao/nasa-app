{"version":3,"sources":["randomImg.js","search-img.js","image-info.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","style","useState","image","setImage","hdImage","setHdImage","date","nextDate","title","setTitle","explanation","setExplanation","display","setDisplay","hd","setHD","useEffect","a","fetch","then","result","json","data","media_type","url","hdurl","console","log","fetchData","backgroundImage","className","to","type","onClick","class","id","for","getRandomInt","min","max","Math","floor","random","year","month","day","changeImage","props","search","setSearch","setData","Input","setInput","query","collection","items","queryString","parse","location","alt","src","onSubmit","event","preventDefault","history","push","size","placeholder","value","onChange","target","required","map","object","pathname","nasa_id","state","links","href","ImageInfo","img","setImg","description","setDescription","res","backgroundColor","includes","describe","substr","indexOf","goBack","App","exact","path","component","RandomImg","SearchPage","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a48d94e9.chunk.js","sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport {withRouter, Link} from 'react-router-dom';\r\n\r\n\r\nfunction RandomImg(){\r\n  const [image, setImage] = useState(\"https://apod.nasa.gov/apod/image/1209/airglow120824_ladanyi_600h.jpg\");\r\n  const [hdImage, setHdImage] = useState(\"https://apod.nasa.gov/apod/image/1209/airglow120824_ladanyi_600h.jpg\");\r\n  const [date, nextDate] = useState('2012-9-6');\r\n  const [title, setTitle]  = useState(\"NASA Image Generator\");\r\n  const [explanation, setExplanation] = useState(\"Click new image\");\r\n  const [display, setDisplay] = useState(false);\r\n  const [hd, setHD] = useState(false);\r\n  function changeImage(){\r\n    function getRandomInt( min, max ){\r\n      return Math.floor(Math.random() * ( max - min + 1 ) + min);\r\n    }\r\n    let year  = getRandomInt(2012,2019);\r\n    let month = getRandomInt(1,12);\r\n    let day   = getRandomInt(5,28);\r\n    let  newDate = year + '-' + month + '-' + day;\r\n    nextDate(newDate);\r\n    \r\n  }\r\n\r\n  function displayInfo(){\r\n    setDisplay(!display);\r\n  }\r\n\r\n  function handleChange(){\r\n    setHD(!hd);\r\n  }\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await fetch(`https://api.nasa.gov/planetary/apod?date=${date}&hd=True&api_key=VFhPnUcWVCwhPloguYc3zsrYpH9dVJhgPdcEuz1A`)\r\n        .then(result => result.json())\r\n        .then(data => {\r\n            if(data.media_type !== \"video\"){\r\n              setImage(data.url)\r\n              setTitle(data.title)\r\n              setExplanation(data.explanation)\r\n              setHdImage(data.hdurl)\r\n              console.log(data.url)\r\n            }\r\n        });\r\n    }\r\n    fetchData();\r\n    }, [date]);\r\n\r\n  let style;\r\n  (hd===false) ? style={backgroundImage: `url(${image})`}:style={backgroundImage: `url(${hdImage})` };\r\n \r\n  return (\r\n    <div className=\"random-img\" style={style}>\r\n      <div className=\"custom-control custom-switch hd-switch\">\r\n        {/* <Link to={{ pathname: \"/search\", state: 'supernova'}}>\r\n          <button type=\"button\" className=\"home-btn btn btn-dark btn-sm \">Search Image</button> \r\n        </Link> */}\r\n        <Link to=\"/search?query=supernova\" >\r\n          <button type=\"button\" className=\"home-btn btn btn-dark btn-sm \">Search Image</button> \r\n        </Link>\r\n        \r\n        <input onClick={() => handleChange()} type=\"checkbox\" class=\"custom-control-input\" id=\"customSwitch1\" />\r\n        <label class=\"custom-control-label\" for=\"customSwitch1\">Toggle HD</label>\r\n      </div>\r\n      <div className=\"content\" >\r\n          <div className=\"buttons home-buttons\">\r\n            <button onClick={() => displayInfo()} className=\"btn btn-info btn-sm home-btn\" >About Image</button>\r\n            <button onClick={() => changeImage()} className=\"btn btn-light btn-sm home-btn\">New Image</button>\r\n          </div>\r\n          {\r\n            display === true ? \r\n            (\r\n            <div className=\"info\">\r\n              <h1 className = \"image-title\">{title}</h1> \r\n              <p className = \"image-paragraph\">{explanation}</p>\r\n            </div>\r\n            ) \r\n            : null\r\n          }\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default withRouter(RandomImg);\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { withRouter, useHistory, useParams, Link } from \"react-router-dom\";\r\nimport queryString from \"query-string\";\r\n\r\nfunction SearchPage(props) {\r\n  const [search, setSearch] = useState(null);\r\n  const [data, setData] = useState(null);\r\n  const [Input, setInput] = useState(\"\");\r\n\r\n  const fetchData = async (query) => {\r\n    let result = await fetch(\r\n      `https://images-api.nasa.gov/search?page=1&media_type=image&q=${query}`\r\n    );\r\n    result = await result.json();\r\n    console.log(result.collection.items);\r\n    setData(result.collection.items);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const { query } = queryString.parse(props.location.search);\r\n    fetchData(query);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (search !== \"\") {\r\n      const { query } = queryString.parse(props.location.search);\r\n      fetchData(query);\r\n    }\r\n  }, [search]);\r\n\r\n  function onSubmit(event) {\r\n    event.preventDefault();\r\n    setSearch(Input);\r\n    props.history.push(`/search?query=${Input}`);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"navbar\">\r\n        <Link to=\"/\">\r\n          <button type=\"button\" className=\"random-btn btn btn-dark btn-sm \">\r\n            Random Image\r\n          </button>\r\n        </Link>\r\n        <img\r\n          className=\"icon\"\r\n          alt=\"nasa icon\"\r\n          src=\"https://www.nasa.gov/sites/default/files/thumbnails/image/nasa-logo-web-rgb.png\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <form\r\n          onSubmit={(event) => onSubmit(event)}\r\n          className=\"form-group input-form\"\r\n        >\r\n          <input\r\n            size=\"50\"\r\n            type=\"text\"\r\n            className=\"form-control task-input\"\r\n            placeholder=\"Space\"\r\n            value={Input}\r\n            onChange={(event) => setInput(`${event.target.value}`)}\r\n            required\r\n          />\r\n          <button className=\"srch-btn btn btn-primary\">Search</button>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"search-images\">\r\n        {data !== null\r\n          ? data.map((object) => (\r\n              <Link\r\n                to={{\r\n                  pathname: `/${object.data[0].nasa_id}`,\r\n                  state: { id: object.data[0].nasa_id },\r\n                }}\r\n              >\r\n                <div className=\"image-container\">\r\n                  <img\r\n                    className=\"search-result\"\r\n                    alt=\"\"\r\n                    src={`${object.links[0].href}`}\r\n                  />\r\n                </div>\r\n              </Link>\r\n            ))\r\n          : null}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(SearchPage);\r\n\r\n// useEffect(() => {\r\n//     if (props.location.state!== undefined){\r\n//         setSearch(`${props.location.state}`)\r\n//     } else {setSearch(\"supernova\")}\r\n\r\n//     const fetchData = async () => {\r\n//       const result = await fetch(`https://images-api.nasa.gov/search?page=1&media_type=image&q=${search}`)\r\n//         .then(res => res.json())\r\n//         .then(data => {\r\n//             setData(data.collection.items)\r\n//             // console.log(data.collection.items[0].data[0].nasa_id)\r\n//         });\r\n//     }\r\n//     fetchData();\r\n//     }, [search]\r\n// )\r\n","\r\nimport React, { useState, useEffect} from 'react';\r\n\r\nfunction ImageInfo(props){\r\n    const [query] = useState(props.location.state.id)\r\n    const [data, setData] = useState(null);\r\n    const [img, setImg] = useState(null);\r\n    const [description, setDescription] = useState(null);\r\n    const [title, setTitle] =  useState(null);\r\n    const [display, setDisplay] = useState(false);\r\n    \r\n    function changeDisplay(){\r\n        setDisplay(!display)\r\n    }\r\n\r\n    useEffect(() => {  \r\n        const fetchData = async () => {\r\n          const result = await fetch(`https://images-api.nasa.gov/search?nasa_id=${query}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setData(data.collection.items)\r\n                setImg(data.collection.items[0].links[0].href)\r\n                setDescription(data.collection.items[0].data[0].description)\r\n                setTitle(data.collection.items[0].data[0].title)\r\n                console.log(data.collection.items[0].links[0].href)\r\n            });\r\n        }\r\n        fetchData();\r\n        }, [query] \r\n    )\r\n\r\n    let style;\r\n    if (img!==null){\r\n        style={backgroundImage: `url(${img})` }\r\n        } else {\r\n        style = {backgroundColor: \"blue\"};\r\n    }\r\n\r\n    if (description!==null) {\r\n        if (description.includes('<a')){\r\n            var describe = description.substr(0, description.indexOf('<a'))\r\n        } else{\r\n            describe = description\r\n        }\r\n    }\r\n   \r\n    return(\r\n        <div>\r\n        \r\n        {(title && description && img) ? \r\n            <div style={style} className=\"image-info\">\r\n                <button type=\"button\" className=\"back-btn btn btn-dark btn-sm\" onClick= {() => props.history.goBack()}>Back</button> \r\n                <div className=\"content\" >\r\n                    <div className=\"buttons\">\r\n                        <button onClick={() => changeDisplay()} className=\"btn btn-info btn-sm about-btn\" >About Image</button>\r\n                    </div>\r\n                    {display === true ? \r\n                        (\r\n                    <div className=\"info\">\r\n                        <h1 className = \"image-title\">{title}</h1> \r\n                        <p className = \"image-paragraph\">{describe}</p>\r\n                    </div>\r\n                        ) \r\n                        : null}\r\n                </div>\r\n            </div>\r\n            : null}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ImageInfo\r\n\r\n","import React from 'react';\nimport RandomImg from './randomImg.js'\nimport SearchPage from './search-img.js'\nimport ImageInfo from './image-info.js'\n\nimport './App.css';\nimport {Switch, Route} from \"react-router-dom\"\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={RandomImg} />\n        <Route path=\"/search/\" component={SearchPage} />\n        <Route path=\"/search/:query\" component={SearchPage} />\n        <Route path=\"/:imageid\" component={ImageInfo} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import {BrowserRouter} from \"react-router-dom\"\nimport {HashRouter as Router} from \"react-router-dom\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}